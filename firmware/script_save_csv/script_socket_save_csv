from digi.xbee.devices import XBeeDevice, RemoteXBeeDevice
from digi.xbee.models.address import XBee64BitAddress
import socket
import time
import random
import csv
import os

# === XBEE CONFIGURATION ===
PORT = "/dev/ttyUSB0"          # Change this to "/dev/ttyACM0", "/dev/ttyUSB1", etc.
BAUD_RATE = 57600              # Serial communication speed
NUM_FRAMES = 100               # Total number of frames to send
PAYLOAD_SIZE = 10              # Size of the payload in bytes
sleepmode = 1
LAMBDA = 1
CONST_INTER = 0.005
START_SLEEP = random.uniform(0.005, 0.015)
NODE_NAME = "N5"

# Arquivo CSV para salvar os dados
CSV_FILENAME = f"101_enviados_{NODE_NAME}.csv"

# === SERVER CONFIGURATION ===
SERVER_IP = '192.168.5.13'
SERVER_PORT = 5000

def generate_poisson_interval(lambd):
    """Returns the next interval (in seconds) based on Poisson distribution."""
    return random.expovariate(lambd)

def wait_for_start_signal():
    """Connects to the sync server and waits for the START message."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((SERVER_IP, SERVER_PORT))
        msg = s.recv(1024)
        if msg == b'START':
            print("Start signal received!")

def main():
    device = XBeeDevice(PORT, BAUD_RATE)

    try:
        device.open()

        if sleepmode == 0:
            print(f"Starting Poisson-based transmission of {NUM_FRAMES} frames (   = {LAMBDA})")
        else:
            print(f"Transmission of {NUM_FRAMES} frames | sleep = {CONST_INTER}s")

        # Prepara o CSV
        file_exists = os.path.isfile(CSV_FILENAME)
        with open(CSV_FILENAME, mode='a', newline='') as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow(["timestamp", "node", "frame_index", "payload"])

            # Broadcast
            remote = RemoteXBeeDevice(device, XBee64BitAddress.BROADCAST_ADDRESS)
#            wait_for_start_signal()
            time.sleep(START_SLEEP)

            for i in range(NUM_FRAMES):
                prefix = f"{NODE_NAME}{i:03}-"
                suffix = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=PAYLOAD_SIZE - len(prefix)))
                payload_str = prefix + suffix
                payload = bytes(payload_str, 'utf-8')

                device.send_data_async(remote, payload, transmit_options=0x01)

                # Timestamp com milissegundos
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + f".{int(time.time()*1000)%1000:03}"

                # Salva no CSV
                writer.writerow([timestamp, NODE_NAME, i, payload_str])
                file.flush()

                print(f"Trama {i+1}/{NUM_FRAMES} | Payload: {payload_str}", flush=True)

                # Intervalo entre tramas
                time.sleep(CONST_INTER)
                # time.sleep(generate_poisson_interval(LAMBDA))  # Alternativa real  stica

        print("Transmission completed.")
    finally:
        if device is not None and device.is_open():
            device.close()

if __name__ == '__main__':
    main()


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

